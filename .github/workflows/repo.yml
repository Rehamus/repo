name: repo CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Grant execute permission for Gradle
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean build --no-daemon

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build Docker image
        run: docker build -t my-spring-boot-app .

      - name: Push Docker image
        run: |
          docker tag my-spring-boot-app:latest ${{ secrets.DOCKER_HUB_USERNAME }}/my-spring-boot-app:latest
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/my-spring-boot-app:latest

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # .env 파일을 EC2 인스턴스에 복사
            echo "${{ secrets.ENV_FILE_CONTENT }}" > .env

            # Docker 이미지를 최신 버전으로 가져옴
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/my-spring-boot-app:latest

            # 기존 컨테이너 중지 및 삭제
            docker stop my-spring-boot-app || true
            docker rm my-spring-boot-app || true

            # .env 파일을 사용하여 Docker 컨테이너 실행
            docker run -d -p 8080:8080 --name my-spring-boot-app --env-file .env ${{ secrets.DOCKER_HUB_USERNAME }}/my-spring-boot-app:latest
